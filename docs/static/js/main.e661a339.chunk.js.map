{"version":3,"sources":["components/AddCategory.js","helpers/getFetchGifs.js","components/GiffGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","evnt","preventDefault","trim","length","categos","type","value","onChange","elem","target","getFetchGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GiffGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,sBAAMC,SAfW,SAACC,GAClBA,EAAKC,iBAEAJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAO,OAAKP,GAAL,mBAAoBO,OAE1CN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,MAAUT,EACVU,SAvBa,SAACC,GACtBV,EAAeU,EAAKC,OAAOH,a,+BCLlBI,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAElBC,EAFkB,iDAE8BC,UAAWH,GAFzC,+DAIAI,MAAMF,GAJN,cAIlBG,EAJkB,gBAKFA,EAAUC,OALR,uBAKhBC,EALgB,EAKhBA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXnB,kBAepBM,GAfoB,4CAAH,sDCFhBO,EAAe,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGnC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,kCAAKA,EAAL,WCJCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGtB,ECHwB,SAAEA,GAE1B,MAA0Bf,mBAAS,CAE/BsB,KAAK,GACLa,SAAS,IAHb,mBAAOC,EAAP,KAAcC,EAAd,KAyBA,OAnBAC,qBAAW,WAEPxB,EAAaC,GACRwB,MAAO,SAAAd,GAGIY,EAAS,CACLf,KAAKG,EACLU,SAAS,SAQ9B,CAAEpB,IAGEqB,EDxB2BI,CAAazB,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACI,qCACI,qBAAIJ,UAAW,2CAAf,cAA6DhB,EAA7D,OAMEoB,GAAW,mBAAGJ,UAAW,mCAAd,0BAGb,qBAAKA,UAAW,YAAhB,SAGYH,EAAOJ,KAAK,SAAEC,GAAF,OAER,aAFuB,CAEtB,EAAD,eAAiCA,GAAZA,EAAIC,aEQtCe,EA7BA,WAGX,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KASA,OAEI,qCACI,2CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEQ2C,EAAWlB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAA4BA,SAAaA,GAAxBA,Y,MCpBzC4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e661a339.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputValue = (elem) => {\r\n        setInputValue( elem.target.value );\r\n    }\r\n\r\n    const handleSubmit = (evnt) => {\r\n        evnt.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2){  // trim borra espacios, la validacion requiere 2 o mas caracteres para ejecutar la funcion\r\n        \r\n            setCategories( categos => [inputValue, ...categos] );\r\n\r\n            setInputValue('');  // vuelve el input a cero\r\n\r\n        }\r\n\r\n    }\r\n    \r\n    \r\n    return (\r\n        <form onSubmit = { handleSubmit } >\r\n            <input \r\n                type='text' \r\n                value = { inputValue }\r\n                onChange = { handleInputValue }\r\n                />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","\r\n\r\n\r\n\r\n    export const getFetchGifs = async( category ) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI (category) }&limit=10&api_key=2urqkSv6V9eOngIprIXizVK0jKYBp40N`;\r\n\r\n        const respuesta = await fetch(url);           // llama y espera a la url\r\n         const {data} = await respuesta.json();           // espera una respuesta en formato json\r\n\r\n         const gifs = data.map(img =>{\r\n             return {\r\n                 id: img.id,\r\n                 title: img.title,\r\n                 url: img.images?.downsized_medium.url\r\n             }\r\n         })\r\n\r\n     return gifs;\r\n    }","import React from 'react'\r\n\r\nexport const GiffGridItem = ( { title, url} ) => {\r\n\r\n\r\n    return (\r\n        <div className='card animate__animated animate__bounce'>\r\n            <img src= {url} alt= {title} />\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GiffGridItem } from './GiffGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    const { data: images, loading } = useFetchGifs(category);  // aca el data:images es solo para cambiarle el nombre, no hace nada mas\r\n\r\n    return (\r\n        <>\r\n            <h3 className= 'animate__animated animate__fadeInLeftBig'> { category } </h3>\r\n\r\n            {/* { loading ? 'Cargando...' : 'Data Cargada'} */}\r\n\r\n            {/* { loading ? <p> LOADING... </p> : null }  */}\r\n            \r\n            { loading && <p className= 'animate__animated animate__flash'> LOADING... </p> }\r\n\r\n\r\n            <div className= 'card-grid'>\r\n            \r\n                    {\r\n                        images.map( ( img) => (    // para usarlo aca y que se entienda\r\n\r\n                            <GiffGridItem key = {img.id} {...img} />\r\n                        ))\r\n                    }\r\n            \r\n            </div> \r\n        </>\r\n    )\r\n}\r\n    ","import { useEffect, useState } from \"react\"\r\nimport { getFetchGifs } from \"../helpers/getFetchGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getFetchGifs(category)\r\n            .then ( img => {\r\n                    // setTimeout( () => {\r\n\r\n                        setstate({\r\n                            data:img,\r\n                            loading: false\r\n                        });\r\n                    // }, 3000)\r\n                    \r\n            })\r\n\r\n\r\n\r\n    }, [ category ]) \r\n\r\n\r\n    return state; // se inicializa asi      { data:[], loading: true };\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifApp = () => {\r\n\r\n    //const categories = ['One Punche', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //    setCategories([...categories, 'HunterXHunter'])\r\n    //     // setCategories(['HunterXHunter',  ...categories])   // para agregar \"hunterXHUnter\" al principio del arreglo\r\n\r\n\r\n    //     //setCategories( catrgogorieess => [...catrgogorieess, 'HunterXHunter'])  // otra forma de hacerlo con un callback\r\n    // }\r\n    return(\r\n\r\n        <>\r\n            <h2> Gif App </h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr />\r\n\r\n            <ol>\r\n                { \r\n                    categories.map(category => (\r\n                        <GifGrid key = { category } category = { category } />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\nexport default GifApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifApp from './GifApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}